@page "/DMHome"

@using DnD35EDMTools.Data
@using Microsoft.EntityFrameworkCore
@inherits DnD35EDMTools.Components.Pages.Common.BaseComponent

<h3>DM Home</h3>

<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>DM Home</title>
    <link rel="stylesheet" href="./styles.css"/>
</head>

<div class="dnd-dm-home-container">
    <div class="dnd-dm-home-main-content">
        <div class="dnd-dm-home-sheet">
            <div class="dnd-dm-home-top-section">
                <div class="dnd-dm-home-top__left">
                    <div>
                        <label for="campaign-name">Campaign Name</label>
                    </div>
                    <div>
                        <select class="dm-select" id="campaign-name" @bind="_selectedCampaignId">
                            @foreach (var id in _campaigns)
                            {
                                <option value=@id.Id title=@id.Description>@id.Name</option>
                            }
                        </select>
                    </div>
                    @if (_selectedCampaignId >= 2)
                    {
                        <div>
                            <label for="campaign-name">Campaign Name:</label>
                        </div>
                        <div>
                            <input type="text" id="name" @bind="CampaignName"/>
                        </div>
                        <div>
                            <label for="stat-rolling-method">Stat Rolling Method</label>
                        </div>
                        <div>
                            <select id="stat-rolling-method" @bind="SelectedStatRollingMethod">
                                <option value="1" title="3D6">3D6</option>
                                <option value="2" title="4D6DL">4D6DL</option>
                                <option value="3" title="4D6R1">4D6R1</option>
                            </select>
                        </div>

                        <div>
                            <label for="hit-point-rolling-method">Hit Point Rolling Method</label>
                        </div>
                        <div>
                            <select id="hit-point-rolling-method" @bind="SelectedHitPointRollingMethod">
                                <option value="3D6" title="3D6">3D6</option>
                                <option value="4D6DL" title="4D6DL">4D6DL</option>
                                <option value="4D6R1" title="4D6R1">4D6R1</option>
                            </select>
                        </div>
                        <div>
                            <input type="checkbox" id="hide-trained-only-skills" value="@HideTrainedOnlySkills" @bind="HideTrainedOnlySkills"/>
                        </div>
                        <div>
                            <label for="hide-trained-only-skills">Hide trained only skills on character sheet.</label>
                        </div>
                        <div>
                            <input type="checkbox" id="allow-avatar-points" value="@AllowAvatarPoints" @bind="AllowAvatarPoints"/>
                        </div>
                        <div>
                            <label for="allow-avatar-points">Enable Avatar Points.</label>
                        </div>
                        <div>
                            <input type="checkbox" id="allow-luck" value="@AllowLuck" @bind="AllowLuck"/>
                        </div>
                        <div>
                            <label for="allow-luck">Enable custom luck stat.</label>
                        </div>
                        <div>
                            <label for="description">Description</label>
                        </div>
                        <div>
                            <textarea class="dm-textarea" id="description" @bind="Description"></textarea>
                        </div>
                    }
                </div>
                <div class="dnd-dm-home-top__right">
                    @if (_selectedCampaignId >= 2)
                    {
                        @foreach (var book in _sourceBooks)
                        {
                            <div>
                                <input type="checkbox" id="@book.Id" @bind="_sourceBooks.Single(b => b.Id == book.Id).IsSelected"/>
                            </div>
                            <div>
                                <label for="@book.Id">@book.Name</label>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<div>
    &nbsp;
</div>

<button style="padding: 4px" @onclick="CreateCampaign">Create Campaign</button>&nbsp;
<button style="padding: 4px" @onclick="UpdateCampaign">Update Campaign</button>&nbsp;
<button style="padding: 4px" @onclick="DeleteCampaign">Delete Campaign</button>
&nbsp;
<div>
    Is a Dry Run?
    <input type="checkbox" @bind="_dryRun"/>
</div>

@code {
    private bool _dryRun = true;

    private int _selectedCampaignId = 1;

    private string CampaignName
    {
        get
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    return selectedCampaign.Name;
                }
            }

            return "";
        }
        set
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    selectedCampaign.Name = value;
                }
            }
        }
    }

    private string SelectedStatRollingMethod
    {
        get
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    return selectedCampaign.StatRollingMethod;
                }
            }

            return "";
        }
        set
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    selectedCampaign.StatRollingMethod = value;
                }
            }
        }
    }

    private string SelectedHitPointRollingMethod
    {
        get
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    return selectedCampaign.HitPointRollingMethod;
                }
            }

            return "";
        }
        set
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    selectedCampaign.HitPointRollingMethod = value;
                }
            }
        }
    }

    private bool HideTrainedOnlySkills
    {
        get
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    return selectedCampaign.HideTrainedOnlySkills;
                }
            }

            return false;
        }
        set
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    selectedCampaign.HideTrainedOnlySkills = value;
                }
            }
        }
    }

    private bool AllowAvatarPoints
    {
        get
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    return selectedCampaign.AllowAvatarPoints;
                }
            }

            return false;
        }
        set
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    selectedCampaign.AllowAvatarPoints = value;
                }
            }
        }
    }

    private bool AllowLuck
    {
        get
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    return selectedCampaign.AllowLuck;
                }
            }

            return false;
        }
        set
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    selectedCampaign.AllowLuck = value;
                }
            }
        }
    }
    
    private string? Description
    {
        get
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    return selectedCampaign.Description;
                }
            }

            return "";
        }
        set
        {
            if (_selectedCampaignId != 0)
            {
                var selectedCampaign = _campaigns.SingleOrDefault(n => n.Id == _selectedCampaignId);
                if (selectedCampaign != null)
                {
                    selectedCampaign.Description = value;
                }
            }
        }
    }

    private List<CampaignData> _campaigns = new List<CampaignData>();
    private List<SourceBookData> _sourceBooks = new List<SourceBookData>();


    protected override async Task OnInitializedAsync()
    {
        await using var db = DbContext;
        _campaigns = await db.Campaigns.ToListAsync();
        _sourceBooks = await db.SourceBooks.Where(book => book.Implemented).ToListAsync();
    }

    private async Task CreateCampaign()
    {
        var newCampaign = new CampaignData
        {
            Id = 0,
            Name = CampaignName,
            Description = Description,
            StatRollingMethod = SelectedStatRollingMethod,
            HitPointRollingMethod = SelectedHitPointRollingMethod,
            HideTrainedOnlySkills = HideTrainedOnlySkills,
            AllowAvatarPoints = AllowAvatarPoints,
            AllowLuck = AllowLuck,
            AllowedSources = new List<SourceBookData>()
        };

        // foreach (var book in _sourceBooks)
        // {
        //     if (book.IsSelected)
        //     {
        //         newCampaign.AllowedSources.Add(book);
        //     }
        // }

        await using var db = DbContext;
        db.Campaigns.Add(newCampaign);

        if (!_dryRun)
            await db.SaveChangesAsync();

        foreach (var prop in newCampaign.GetType().GetProperties())
        {
            Console.WriteLine($"{prop.Name}: {prop.GetValue(newCampaign)}");
        }

        foreach (var book in newCampaign.AllowedSources)
        {
            Console.WriteLine($"Book: {book.Id}");
        }
    }

    private async Task UpdateCampaign()
    {
        if (_selectedCampaignId == 0)
        {
            Console.WriteLine("No campaign selected.");
            return;
        }

        await using var db = DbContext;

        var campaignToUpdate = await db.Campaigns.SingleOrDefaultAsync(c => c.Id == _selectedCampaignId);

        if (campaignToUpdate == null)
        {
            Console.WriteLine("Campaign not found.");
            return;
        }

        campaignToUpdate.Name = CampaignName;
        campaignToUpdate.Description = Description;
        campaignToUpdate.StatRollingMethod = SelectedStatRollingMethod;
        campaignToUpdate.HitPointRollingMethod = SelectedHitPointRollingMethod;
        campaignToUpdate.HideTrainedOnlySkills = HideTrainedOnlySkills;
        campaignToUpdate.AllowAvatarPoints = AllowAvatarPoints;
        campaignToUpdate.AllowLuck = AllowLuck;

        if (!_dryRun)
            await db.SaveChangesAsync();
    }


    private async Task DeleteCampaign()
    {
        if (_selectedCampaignId == 0)
        {
            Console.WriteLine("No campaign selected.");
            return;
        }

        await using var db = DbContext;

        var campaignToDelete = await db.Campaigns.SingleOrDefaultAsync(c => c.Id == _selectedCampaignId);

        if (campaignToDelete == null)
        {
            Console.WriteLine("Campaign not found.");
            return;
        }

        db.Campaigns.Remove(campaignToDelete);

        if (!_dryRun)
        {
            await db.SaveChangesAsync();
            _campaigns = await db.Campaigns.ToListAsync();
        }
    }
}
