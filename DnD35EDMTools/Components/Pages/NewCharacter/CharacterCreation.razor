@page "/CharacterCreation"

@using DnD35EDMTools.Data
@using DnD35EDMTools.Data.Lists
@using Microsoft.EntityFrameworkCore
@using DnD35EDMTools.Helpers
@inherits DnD35EDMTools.Components.Pages.Common.BaseComponent

<h3>Character Creation</h3>

<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Character Creation</title>
    <link rel="stylesheet" href="./styles.css"/>
</head>

<div class="dnd-character-creation-container">
    <div class="dnd-character-main-content">
        <div class="dnd-character-creation-sheet">
            <div class="dnd-cc-top-section">
                <div class="dnd-cc-top__left">
                    <div>
                        <label for="campaign">Campaign</label>
                    </div>
                    <div>
                        <select class="cc-select" id="campaign" name="campaign" @bind="SelectedCampaignId">
                            @foreach (var id in _campaigns)
                            {
                                <option value="@id.Id" title="@id.Description">@id.Name</option>
                            }
                        </select>
                    </div>
                <div>
                    &nbsp;
                </div>
                @if (_selectedCampaignId != 1)
                {
                    <div>
                        <label for="name">Character Name:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="name" @bind="_characterName"/>
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        <label for="race">Race:</label>
                    </div>
                    <div style="width: 150px">
                        <select class="cc-select" id="race" @bind="SelectedRaceId">
                            @foreach (var race in _races)
                            {
                                <option value=@race.Id title=@race.Description>@race.Race</option>
                            }
                        </select>
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        <label for="gender">Gender:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="gender" @bind="SelectedGenderId">
                            @foreach (var gender in GetRaceGenders())
                            {
                                <option value=@gender.Id title=@gender.Description>@gender.Gender</option>
                            }
                        </select>
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        <label for="order">Order:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="order" @bind="_selectedOrderId">
                            @foreach (var order in _orders)
                            {
                                <option value=@order.Id title=@order.Description>@order.Order</option>
                            }
                        </select>
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        <label for="morality">Morality:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="morality" @bind="_selectedMoralityId">
                            @foreach (var morality in _moralities)
                            {
                                <option value=@morality.Id title=@morality.Description>@morality.Morality</option>
                            }
                        </select>
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        <label for="deity">Deity:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="deity" @bind="_selectedDeityId">
                            @foreach (var name in FilteredDeities)
                            {
                                <option value=@name.Id title=@name.Description>@name.Name</option>
                            }
                        </select>
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        <label for="class">Class:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="class" @bind="SelectedClassId">
                            @foreach (var name in _classes)
                            {
                                <option value=@name.Id title=@name.Description>@name.Name</option>
                            }
                        </select>
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    @if (SelectedRaceId > 1 && SelectedGenderId > 1 && SelectedClassId > 1)
                    {
                        <PhysicalAttributes _selectedRaceId="@_selectedRaceId"
                                            _characterHair="@_characterHair"
                                            _characterEyes="@_characterEyes"
                                            _characterSkin="@_characterSkin"
                                            _characterAge="@_characterAge"
                                            _characterHeight="@_characterHeight"
                                            _characterWeight="@_characterWeight"
                                            _races="@_races"
                                            _genders="@_genders"
                                            SelectedGenderId="@SelectedGenderId"
                                            _classes="@_classes"
                                            SelectedClassId="@SelectedClassId"
                                            _raceStartingAge="@_raceStartingAge"
                                            _classAgeCategory="@_classAgeCategory"
                                            _ageTypeDice="@_ageTypeDice"
                                            _raceBaseHeight="@_raceBaseHeight"
                                            _raceRandomHeight="@_raceRandomHeight"
                                            _raceBaseWeight="@_raceBaseWeight"
                                            _raceRandomWeight="@_raceRandomWeight">
                            
                        </PhysicalAttributes>
                    }
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    @if (SelectedRaceId > 1)
                    {
                    @if (SelectedCampaignStatRollingMethod is "3D6" or "3D6R1" or "4D6DL")
                    {
                        @foreach (var statField in _statFields)
                        {
                            var statName = statField.Key;
                            var statValue = GetStatValue(statName);
                            <div>
                                <label for="@statName">@statName:</label>
                            </div>
                            <div>
                                <input class="cc-input" type="text" id="@statName" @bind="statValue"/>
                            </div>
                            <div>
                                <button class="cc-randomize-button" @onclick="RollFunction">Roll</button>
                            </div>
                            continue;
                            void RollFunction() => RollStat(SelectedCampaignStatRollingMethod, statName);
                        }
                    }
                    @if (SelectedCampaignStatRollingMethod is "SAL" or "SAA" or "SAH")
                    {
                        @foreach (var statField in _statFields)
                        {
                            var statName = statField.Key;
                            var statValue = GetStatValue(statName);
                            var modifierValue = CalculateModifier(statValue);
                            <div>
                                <label for="@statName">@statName:</label>
                            </div>
                            <div>
                                <input class="cc-point-buy-stat-input" type="text" id="@statName" @bind="statValue"/><input class="cc-point-buy-modifier-input" type="text" id="@($"{statName}-modifier")" value="@modifierValue"/>
                            </div>
                            <div>
                                @foreach (var number in _standardArray)
                                {
                                    <button class="cc-point-buy-button"
                                            @onclick="OnclickAction"
                                            disabled="@(statValue == number)">
                                        @number
                                    </button>
                                    continue;
                                    void OnclickAction() => SwapStatValues(number, statName);
                                }
                            </div>
                        }
                    }
                    @if (SelectedCampaignStatRollingMethod is "PBA" or "PBR")
                    {
                        <div>
                            <label for="points">Points:</label>
                        </div>
                        <div>
                             <input class="cc-point-buy-stat-input" type="text" id="points" value="@_characterStatPoints" readonly/>
                        </div>
                        <div>
                            @if (SelectedCampaignStatRollingMethod == "PBR")
                            {
                                <button class="cc-randomize-button" @onclick="RollRandomStatPoints">Roll</button>
                            }
                            &nbsp;
                        </div>
                        @foreach (var statField in _statFields)
                        {
                            var statName = statField.Key;
                            var statValue = GetStatValue(statName);
                            var modifierValue = CalculateModifier(statValue);
                            <div>
                                <label for="@statName">@statName:</label>
                            </div>
                            <div>
                                <input class="cc-point-buy-stat-input" type="text" id="@statName" @bind="statValue"/><input class="cc-point-buy-modifier-input" type="text" id="@($"{statName}-modifier")" value="@modifierValue"/>
                            </div>
                            <div>
                                <button class="cc-point-buy-button" @onclick="IncreaseAction">+</button><button class="cc-point-buy-button" @onclick="DecreaseAction">-</button>
                            </div>
                            continue;
                            void DecreaseAction() => DecreaseStatValue(statName);
                            void IncreaseAction() => IncreaseStatValue(statName);
                        }
                    }
                    @if (_campaigns.Single(c => c.Id == _selectedCampaignId).AllowLuck)
                    {
                        <div>
                            <label for="luck">Luck:</label>
                        </div>
                        <div>
                            <input class="cc-input" type="text" id="luck" @bind="_characterLuck"/>
                        </div>
                        <div>
                            <button class="cc-randomize-button" @onclick="CalculateLuck">Calculate</button>
                        </div>
                    }
                    }
                }
                </div>
               <div class="dnd-cc-top__middle">
                   @foreach (var language in FilteredLanguages)
                   {
                       var isBonus = language.IsBonus;
                       <div class="language-item">
                           <input type="checkbox" id="@language.Name.ToLower()" @onchange="_ => ToggleLanguageSelection(language.Id)" checked="@isBonus">
                           &nbsp;
                           <label for="@language.Name.ToLower()" title="@language.Description">@language.Name</label>
                       </div>
                   }
               </div>
                <div class="dnd-cc-top__right">
                    @if (SelectedClassId > 1)
                    {
                        <div>
                            <label for="starting-equipment-method">Starting Equipment:</label>
                        </div>
                        <select class="cc-select" id="starting-equipment-method" name="starting-equipment-method" @bind="_selectedStartingEquipment">
                            @foreach (var id in _startingEquipmentMethods)
                            {
                                <option value="@id.Id" title="@id.Description">@id.Name</option>
                            }
                        </select>
                        @if (_selectedStartingEquipment < 3)
                        {
                            <div>
                                <input class="cc-gold-input" type="text" id="starting-gold" @bind="_goldPieces" readonly/>
                            </div>
                            <div>
                                <button class="cc-gold-randomize-button" @onclick="GetStartingEquipment">Roll</button>
                            </div>
                        }
                        @if (_selectedStartingEquipment == 3)
                        {
                            <div>
                                &nbsp;
                            </div>
                            <div>
                                <button class="cc-gold-randomize-button" @onclick="GetStartingEquipment">Customize</button>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<div>
    &nbsp;
</div>

<button style="padding: 4px" @onclick="CreateNewCharacter">Create</button>&nbsp;<button style="padding: 4px" @onclick="GenerateRandomCharacter">Random Jo</button>
&nbsp;
<div>
    Is a Dry Run?
    <input type="checkbox" @bind="_dryRun"/>
</div>
@code {
    private bool _dryRun = true;
    private List<CampaignData> _campaigns = [];
    private List<RaceData> _races = [];
    private List<OrderData> _orders = [];
    private List<MoralityData> _moralities = [];
    private List<ClassData> _classes = [];
    private List<GenderData> _genders = [];
    private List<DeityData> _deities = [];
    private List<int> _standardArray = [];
    private List<LanguageData> _languages = [];
    private readonly List<int> _selectedLanguageIds = [];
    private readonly List<StartingEquipment> _startingEquipmentMethods = [];
    private List<DeityData> FilteredDeities
    {
        get
        {
            if (_selectedMoralityId == 0 || _selectedOrderId == 0)
            {
                return _deities;
            }

            var selectedAlignment = AlignmentHelper.GetAlignmentFromOrderAndMorality(_orders, _moralities,
                _orders.Single(m => m.Id == _selectedOrderId).Midpoint,
                _moralities.Single(m => m.Id == _selectedMoralityId).Midpoint);

            return _deities.Where(d => d.Alignment == selectedAlignment || d.Alignment == "Any").ToList();
        }
    }

    private List<LanguageData> FilteredLanguages
    {
        get
        {
            var filteredLanguages = new List<LanguageData>();
            if (_selectedCampaignId == default || SelectedRaceId == default || SelectedClassId == default)
            {
                return filteredLanguages;
            }
            
            var selectedCampaign = _campaigns.SingleOrDefault(c => c.Id == _selectedCampaignId);
            var selectedRace = _races.Single(r => r.Id == SelectedRaceId).Race;
            var selectedClass = _classes.Single(r => r.Id == SelectedClassId).Name;
            if (selectedCampaign != null && selectedRace != "Select a Race" && selectedClass != "Select a Class")
            {
                var allowedSourceBooks = selectedCampaign.AllowedSources;
                foreach (var language in _languages)
                {
                    foreach (var sourceBook in allowedSourceBooks)
                    {
                        var isAllowedBySourceBook = language.Sourcebook == sourceBook.Abbreviation;
                        var isAllowedByRace = language.RequiredRace == "Any" || language.RequiredRace == selectedRace;
                        var isAllowedByClass = language.RequiredClass == "Any" || language.RequiredClass == selectedClass;
                        if (isAllowedBySourceBook && isAllowedByRace && isAllowedByClass)
                        {
                            filteredLanguages.Add(language);
                            
                            if (language.IsBonus && !_selectedLanguageIds.Contains(language.Id))
                            {
                                _selectedLanguageIds.Add(language.Id);
                            }
                            
                            break;
                        }
                    }
                }
            }

            return filteredLanguages;
        }
    }

    private void ToggleLanguageSelection(int languageId)
    {
        if (_selectedLanguageIds.Contains(languageId))
        {
            _selectedLanguageIds.Remove(languageId);
        }
        else
        {
            _selectedLanguageIds.Add(languageId);
        }
    }
    
    private List<ColourData> GetRaceHairColours()
    {
        if (SelectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == SelectedRaceId).HairColours.ToList();
    }

    private List<ColourData> GetRaceEyeColours()
    {
        if (SelectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == SelectedRaceId).EyeColours.ToList();
    }

    private List<ColourData> GetRaceSkinColours()
    {
        if (SelectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == SelectedRaceId).SkinColours.ToList();
    }
    
    private int _selectedCampaignId = 1;

    private int SelectedCampaignId
    {
        get => _selectedCampaignId;
        set
        {
            _selectedCampaignId = value;
            InitializeCharacterStatsBasedOnCampaign();
            PopulateStartingEquipmentMethods();
        }
    }

    private int SelectedRaceId
    {
        get => _selectedRaceId;
        set
        {
            _selectedRaceId = value;
            _raceStartingAge = _races.Single(r => r.Id == SelectedRaceId).AdulthoodAge;
            if (SelectedRaceId > 1 && _selectedClassId > 1)
            {
                GetAgeDiceType();
            }
            PopulateStartingEquipmentMethods();
        }
    }

    private int SelectedGenderId
    {
        get => _selectedGenderId;
        set
        {
            _selectedGenderId = value;
            if (_selectedGenderId >1)
                GetRaceHeightAndWeight();
        }
    }
    
    private void InitializeCharacterStatsBasedOnCampaign()
    {
        switch (SelectedCampaignStatRollingMethod)
        {
            case "3D6":
            case "3D6R1":
            case "4D6DL":
                SetStatsToZero();
                break;
            case "SAL":
                SetStatsToZero();
                _standardArray = [13, 12, 11, 10, 9, 8];
                break;
            case "SAA":
                SetStatsToZero();
                _standardArray = [15, 14, 13, 12, 10, 8];
                break;
            case "SAH":
                SetStatsToZero();
                _standardArray = [17, 16, 15, 14, 11, 9];
                break;
            case "PBA":
            case "PBR":
                if (SelectedCampaignStatRollingMethod == "PBR")
                {
                    _characterStatPoints = 0;
                    _randomPointsRolled = 0;
                }

                _characterStatPoints = 25;
                _characterStrength = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                _characterDexterity = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                _characterConstitution = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                _characterIntelligence = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                _characterWisdom = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                _characterCharisma = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                break;
        }
    }

    private string SelectedCampaignStatRollingMethod
    {
        get
        {
            return _campaigns.Single(c => c.Id == _selectedCampaignId).StatRollingMethod;
        }
    }

    private string SelectedClassStartingGold
    {
        get
        {
            return _classes.Single(c => c.Id == SelectedClassId).StartingGold;
        }
    }
    
    private void PopulateStartingEquipmentMethods()
    {
        _startingEquipmentMethods.Clear();

        if (_campaigns.Single(c => c.Id == _selectedCampaignId).AllowWealthAverage)
        {
            _startingEquipmentMethods.Add(new StartingEquipment
            {
                Id = 1,
                Name = "Wealth Average",
                Description = "Roll starting wealth using class average values"
            });
        }

        if (_campaigns.Single(c => c.Id == _selectedCampaignId).AllowWealthRandom)
        {
            _startingEquipmentMethods.Add(new StartingEquipment
            {
                Id = 2,
                Name = "Wealth Random",
                Description = "Roll starting wealth using class random values"
            });
        }

        if (_campaigns.Single(c => c.Id == _selectedCampaignId).AllowStartingEquipment)
        {
            _startingEquipmentMethods.Add(new StartingEquipment
            {
                Id = 3,
                Name = "Equipment Pack",
                Description = "Customize starting equipment"
            });
        }
    }
    
    private string _characterName = "";
    private string _characterAge = "";
    private string _characterHeight = "";
    private int _characterWeight;
    private int _selectedRaceId;
    private int _raceStartingAge;
    private int _raceBaseHeight;
    private string _raceRandomHeight = "0d0";
    private int _raceBaseWeight;
    private string _raceRandomWeight = "0d0";
    private int _characterEyes;
    private int _characterHair;
    private int _characterSkin;
    private int _selectedClassId;
    private string _classAgeCategory = "";
    private string _ageTypeDice = "0d0";
    private int _selectedOrderId;
    private int _selectedMoralityId;
    private int _selectedDeityId;
    private int _selectedGenderId;

    private int _randomPointsRolled;
    private int _characterStatPoints = 25;
    private int _characterStrength;
    private int _characterDexterity;
    private int _characterConstitution;
    private int _characterIntelligence;
    private int _characterWisdom;
    private int _characterCharisma;
    private int _characterLuck;
    
    private int _selectedStartingEquipment;
    private int _platinumPieces;
    private int _goldPieces;
    private int _silverPieces;
    private int _copperPieces;
    
    private Dictionary<string, Action<int>> _statFields = null!;

    protected override async Task OnInitializedAsync()
    {
        await using var db = DbContext;
        _campaigns = await db.Campaigns
            .Where(c => c.Id != 2)
            .Include(c => c.AllowedSources)
            .ToListAsync();
        _races = await db.Races.Include(r => r.HairColours)
            .Include(r => r.EyeColours)
            .Include(r => r.SkinColours)
            .Include(r => r.Genders)
            .ToListAsync();
        _orders = await db.Orders.ToListAsync();
        _moralities = await db.Moralities.ToListAsync();
        _classes = await db.Classes.ToListAsync();
        _genders = await db.Genders.ToListAsync();
        _deities = await db.Deities.ToListAsync();
        _languages = await db.Languages.ToListAsync();
        InitializeStatFields();
    }
    
    private void InitializeStatFields()
    {
        _statFields = new Dictionary<string, Action<int>>
        {
            { "Strength", val => _characterStrength = val },
            { "Dexterity", val => _characterDexterity = val },
            { "Constitution", val => _characterConstitution = val },
            { "Intelligence", val => _characterIntelligence = val },
            { "Wisdom", val => _characterWisdom = val },
            { "Charisma", val => _characterCharisma = val },
        };
    }
    
    private List<GenderData> GetRaceGenders()
    {
        if (SelectedRaceId == 0)
            return new List<GenderData>();
        return _races.Single(r => r.Id == SelectedRaceId).Genders.ToList();
    }

    private void SetStatsToZero()
    {
        _characterStrength = 0;
        _characterDexterity = 0;
        _characterConstitution = 0;
        _characterIntelligence = 0;
        _characterWisdom = 0;
        _characterCharisma = 0;
    }
    
    private void RollStat(string rollingMethod, string stat)
    {
        int statValue = GetStatValue(stat);
        do
        {
            if (statValue <= 7)
                statValue = RollStats.RollStatBasedOnMethod(rollingMethod);
        } while (statValue <= 7);
        SetStatValue(stat, statValue);
    }

    private int GetStatValue(string stat)
    {
        return stat switch
        {
            "Strength" => _characterStrength,
            "Dexterity" => _characterDexterity,
            "Constitution" => _characterConstitution,
            "Intelligence" => _characterIntelligence,
            "Wisdom" => _characterWisdom,
            "Charisma" => _characterCharisma,
            _ => throw new ArgumentException("Invalid stat name", nameof(stat)),
        };
    }

    private void SetStatValue(string stat, int value)
    {
        if (_statFields.TryGetValue(stat, out var setStatValue))
        {
            setStatValue(value);
        }
        else
        {
            throw new ArgumentException("Invalid stat");
        }
    }

    private void IncreaseStatValue(string stat)
    {
        const int maxStatValue = 18;

        if (!_statFields.ContainsKey(stat)) return;

        var currentStatValue = GetStatValue(stat);
        if (currentStatValue >= maxStatValue) return;

        var pointsToDeduct = currentStatValue < 13 ? 1 : CalculateModifier(currentStatValue);
        if (_characterStatPoints - pointsToDeduct >= 0)
        {
            _characterStatPoints -= pointsToDeduct;
            _statFields[stat](currentStatValue + 1);
        }
    }
    
    private void DecreaseStatValue(string stat)
    {
        const int minStatValue = 8;
        
        if (!_statFields.ContainsKey(stat)) return;
        
        var currentStatValue = GetStatValue(stat);
        if (currentStatValue <= minStatValue) return;

        var pointsToAdd = 1;
        if (currentStatValue >= 13)
        {
            pointsToAdd = CalculateModifier(currentStatValue) - (CalculateModifier(currentStatValue - 1) == CalculateModifier(currentStatValue) ? 0 : 1);
        }

        _characterStatPoints += pointsToAdd;
        SetStatValue(stat, currentStatValue - 1);
    }

    private void RollRandomStatPoints()
    {
        if (_randomPointsRolled != 0) return;
        _characterStatPoints = DiceRoller.RollDice("8d12");
        _randomPointsRolled = 1;
    }

    private void SwapStatValues(int selectedNumber, string targetStat)
    {

        if (_statFields.ContainsKey(targetStat))
        {
            SetSecondaryStatValue(selectedNumber, GetStatValue(targetStat));
            _statFields[targetStat](selectedNumber);
        }
    }

    private void SetSecondaryStatValue(int number, int tempStat)
    {

        foreach (var statField in _statFields)
        {
            if (GetStatValue(statField.Key) == number)
            {
                statField.Value(tempStat);
                break;
            }
        }
    }
    
    private int CalculateModifier(int stat)
    {
        return (int)Math.Floor((stat - 10) / 2.0);
    }
    
    private void CalculateLuck()
    {
        if (_characterStrength != 0 && _characterDexterity != 0 && _characterConstitution != 0 && _characterIntelligence != 0 && _characterWisdom != 0 && _characterCharisma !=0)
        _characterLuck = (_characterStrength + _characterDexterity + _characterConstitution + _characterIntelligence + _characterWisdom + _characterCharisma) / 6;
    }

    private void GetStartingEquipment()
    {
        if(_selectedStartingEquipment == 1)
        {
        if (_goldPieces != 0) return;
        var startingWealth = RollWealth.StartingWealthRandom(SelectedClassStartingGold);
        
        _platinumPieces = startingWealth[0];
        _goldPieces = startingWealth[1];
        _silverPieces = startingWealth[2];
        _copperPieces = startingWealth[3];
        }
        
        if(_selectedStartingEquipment == 2)
        {
            if (_goldPieces != 0) return;
            var startingWealth = RollWealth.StartingWealthRandom(SelectedClassStartingGold);
        
            _platinumPieces = startingWealth[0];
            _goldPieces = startingWealth[1];
            _silverPieces = startingWealth[2];
            _copperPieces = startingWealth[3];
        }
        if(_selectedStartingEquipment == 3)
        {
            Console.WriteLine("Equipment Packs not Implemented");
        }
    }

    private int SelectedClassId
    {
        get => _selectedClassId;
        set
        {
            if (_selectedClassId != value)
            {
                _selectedClassId = value;
                _classAgeCategory = _classes.Single(c => c.Id == SelectedClassId).AgeCategory;
                if (SelectedRaceId > 1 && _selectedClassId > 1)
                {
                    GetAgeDiceType();
                }
                SetWealthToZero();
            }
        }
    }

    private void SetWealthToZero()
    {
        _platinumPieces = 0;
        _goldPieces = 0;
        _silverPieces = 0;
        _copperPieces = 0;
    }

    private void GetAgeDiceType()
    {
        string ageTypeDice = "";
        
        if (_classAgeCategory == "Simple") ageTypeDice = _races.Single(r => r.Id == SelectedRaceId).SimpleDice;
        else if (_classAgeCategory == "Moderate") ageTypeDice = _races.Single(r => r.Id == SelectedRaceId).ModerateDice;
        else if (_classAgeCategory == "Complex") ageTypeDice = _races.Single(r => r.Id == SelectedRaceId).ComplexDice;

        _ageTypeDice = ageTypeDice;
    }

    private void GetRaceHeightAndWeight()
    {
            _raceRandomHeight = _races.Single(r => r.Id == _selectedRaceId).HeightDice;
            _raceRandomWeight = _races.Single(r => r.Id == _selectedRaceId).WeightDice;
            
            var gender = _genders.Single(g => g.Id == SelectedGenderId).Gender;

            if (gender == "Male")
            {
                _raceBaseHeight = _races.Single(r => r.Id == _selectedRaceId).MaleHeight;
                _raceBaseWeight = _races.Single(r => r.Id == _selectedRaceId).MaleWeight;
            }
            else if (gender == "Female")
            {
                _raceBaseHeight = _races.Single(r => r.Id == _selectedRaceId).FemaleHeight;
                _raceBaseWeight = _races.Single(r => r.Id == _selectedRaceId).FemaleWeight;
            }
            else
            {
                _raceBaseHeight = (_races.Single(r => r.Id == SelectedRaceId).MaleHeight + _races.Single(r => r.Id == _selectedRaceId).FemaleHeight) / 2;
                _raceBaseWeight = (_races.Single(r => r.Id == SelectedRaceId).MaleWeight + _races.Single(r => r.Id == _selectedRaceId).FemaleWeight) / 2;
            }
        
    }
    
    private void GenerateRandomCharacter()
    {
        bool skipRollStatsAndLuck = false;
        if (_selectedCampaignId == 1)
        {
            Console.WriteLine("No Campaign Selected");
            return;
        }
        
        var rand = new Random();
        _characterName = "Random Jo";
        SelectedRaceId = rand.Next(2, _races.Count +1);
        
        var raceEyes = GetRaceEyeColours();
        var randomRaceEyesIndex = rand.Next(2, raceEyes.Count);
        _characterEyes = raceEyes[randomRaceEyesIndex].Id;
        
        var raceHair = GetRaceHairColours();
        var randomRaceHairIndex = rand.Next(2, raceHair.Count);
        _characterHair = raceHair[randomRaceHairIndex].Id;
        
        var raceSkin = GetRaceSkinColours();
        var randomRaceSkinIndex = rand.Next(2, raceSkin.Count);
        _characterSkin = raceSkin[randomRaceSkinIndex].Id;

        SelectedClassId = rand.Next(2, _classes.Count +1);
        
        _characterAge = CharacterAppearanceHelpers.RandomizeAge(_raceStartingAge, _ageTypeDice);
        
        _selectedOrderId = rand.Next(1, _orders.Count +1);
        _selectedMoralityId = rand.Next(1, _moralities.Count +1);

        var deity = FilteredDeities;
        var randomDeityIndex = rand.Next(2, FilteredDeities.Count);
        _selectedDeityId = deity[randomDeityIndex].Id;
        
        var raceGenders = GetRaceGenders();
        var randomGenderIndex = rand.Next(2, raceGenders.Count);
        SelectedGenderId = raceGenders[randomGenderIndex].Id;
        
        _characterHeight = CharacterAppearanceHelpers.RandomizeHeight(_raceBaseHeight, _raceRandomHeight);
        
        _characterWeight = CharacterAppearanceHelpers.RandomizeWeight(_raceBaseWeight,_raceRandomWeight,ConversionHelper.ConvertFeetAndInchesToInches(_characterHeight));
        
        var notAllowedMethods = new[] { "PBA", "BPR", "SAL", "SAA", "SAH" };
        if (notAllowedMethods.Contains(SelectedCampaignStatRollingMethod))
        {
            skipRollStatsAndLuck = true;
        }

        if (!skipRollStatsAndLuck)
        {
            SetStatsToZero();
            RollStat(SelectedCampaignStatRollingMethod, "Strength");
            RollStat(SelectedCampaignStatRollingMethod, "Dexterity");
            RollStat(SelectedCampaignStatRollingMethod, "Constitution");
            RollStat(SelectedCampaignStatRollingMethod, "Wisdom");
            RollStat(SelectedCampaignStatRollingMethod, "Intelligence");
            RollStat(SelectedCampaignStatRollingMethod, "Charisma");
            CalculateLuck();
        }

        SetWealthToZero();
    }
    
    private void CreateNewCharacter()
    {
        if (_selectedCampaignId == 1)
        {
            Console.WriteLine("No Campaign Selected");
            return;
        }
        
        var newCharacter = new CharacterData
        {
            Name = _characterName,
            CampaignId = _selectedCampaignId,
            Class = _classes.Single(c => c.Id == SelectedClassId).Id,
            Race = _races.Single(r => r.Id == SelectedRaceId).Id,
            Experience = 0,
            Strength = _characterStrength,
            Dexterity = _characterDexterity,
            Constitution = _characterConstitution,
            Wisdom = _characterWisdom,
            Intelligence = _characterIntelligence,
            Charisma = _characterCharisma,
            HitPoints = RollHp.LevelOneHitPoints(_classes.Single(r => r.Id == SelectedClassId).HitDice) + CalculateModifier(_characterConstitution),
            Deity = _deities.Single(d => d.Id == _selectedDeityId).Id,
            Order = _orders.Single(o => o.Id == _selectedOrderId).Midpoint,
            Morality = _moralities.Single(m => m.Id == _selectedMoralityId).Midpoint,
            Gender = SelectedGenderId,
            Hair = _characterHair,
            Eyes = _characterEyes,
            Skin = _characterSkin,
            Age = Int32.Parse(_characterAge),
            Height = ConversionHelper.ConvertFeetAndInchesToInches(_characterHeight),
            Weight = _characterWeight,
            Languages = _selectedLanguageIds,
            PlatinumPieces = _platinumPieces,
            GoldPieces = _goldPieces,
            SilverPieces = _silverPieces,
            CopperPieces = _copperPieces,
            PlayerName = "Shaun" // To Be Implemented (get from active account creating the character)
        };

        using var db = DbContext;

        db.Characters.Add(newCharacter);
        
        if (!_dryRun)
            db.SaveChanges();
        
        foreach (var property in newCharacter.GetType().GetProperties())
        {
            Console.WriteLine($"{property.Name}: {property.GetValue(newCharacter)}");
        }
    
    }
    
}