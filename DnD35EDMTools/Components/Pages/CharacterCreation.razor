@page "/CharacterCreation"

@using DnD35EDMTools.Data
@using Microsoft.EntityFrameworkCore
@using DnD35EDMTools.Helpers
@inherits DnD35EDMTools.Components.Pages.Common.BaseComponent

<h3>Character Creation</h3>

<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Character Creation</title>
    <link rel="stylesheet" href="./styles.css"/>
</head>

<div class="dnd-character-creation-container">
    <div class="dnd-character-main-content">
        <div class="dnd-character-creation-sheet">
            <div class="dnd-cc-top-section">
                <div class="dnd-cc-top__left">
                    <div>
                        <label for="name">Character Name:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="name" @bind="_characterName"/>
                    </div>

                    <div>
                        <label for="race">Race:</label>
                    </div>
                    <div style="width: 150px">
                        <select class="cc-select" id="race" @bind="_selectedRaceId">
                            @foreach (var race in _races)
                            {
                                <option value=@race.Id title=@race.Description>@race.Race</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="gender">Gender:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="gender" @bind="_selectedGenderId" >
                            @foreach (var gender in GetRaceGenders())
                            {
                                <option value=@gender.Id title=@gender.Description>@gender.Gender</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="order">Order:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="order" @bind="_selectedOrderId">
                            @foreach (var order in _orders)
                            {
                                <option value=@order.Id title=@order.Description>@order.Order</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="morality">Morality:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="morality" @bind="_selectedMoralityId">
                            @foreach (var morality in _moralities)
                            {
                                <option value=@morality.Id title=@morality.Description>@morality.Morality</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="deity">Deity:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="deity" @bind="_selectedDeityId">
                            @foreach (var name in FilteredDeities)
                            {
                                <option value=@name.Id title=@name.Description>@name.Name</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="morality">Class:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="class" @bind="_selectedClassId">
                            @foreach (var name in _classes)
                            {
                                <option value=@name.Id title=@name.Description>@name.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="dnd-cc-top__right">
                    <div>
                        <label for="hair">Hair:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="hair" @bind="_characterHair">
                            @foreach (var colour in GetRaceHairColours())
                            {
                                <option value="@colour.Id">@colour.Colour</option>
                            }
                        </select>
                    </div>
                    <div class="cc-colour-box" style="background-color: @(GetColourById(_characterHair, GetRaceHairColours()).ColourHexCode)">
                        &nbsp;
                    </div>
                    <div>
                        <label for="eyes">Eyes:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="eyes" @bind="_characterEyes">
                            @foreach (var colour in GetRaceEyeColours())
                            {
                                <option value="@colour.Id">@colour.Colour</option>
                            }
                        </select>
                    </div>
                    <div class="cc-colour-box" style="background-color: @(GetColourById(_characterEyes, GetRaceEyeColours()).ColourHexCode)">
                        &nbsp;
                    </div>
                    <div>
                        <label for="skin">Skin:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="skin" @bind="_characterSkin">
                            @foreach (var colour in GetRaceSkinColours())
                            {
                                <option value="@colour.Id">@colour.Colour</option>
                            }
                        </select>
                    </div>
                    <div class="cc-colour-box" style="background-color: @(GetColourById(_characterSkin, GetRaceSkinColours()).ColourHexCode)">
                        &nbsp;
                    </div>
                    <div>
                        <label for="age">Age:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="age" @bind="_characterAge"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick="RandomizeAge">Random</button>
                    </div>
                    <div>
                        <label for="height">Height:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="height" @bind="_characterHeight"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick="RandomizeHeight">Random</button>
                    </div>
                    <div>
                        <label for="weight">Weight:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="weight" @bind="_characterWeight"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick="RandomizeWeight">Random</button>
                    </div>
                    <div>
                        <label for="weight">Strength:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="strength" @bind="_characterStrength"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick='() => Roll3d6("Strength")'>Roll</button>
                    </div>
                    <div>
                        <label for="weight">Dexterity:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="dexterity" @bind="_characterDexterity"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick='() => Roll3d6("Dexterity")'>Roll</button>
                    </div>
                    <div>
                        <label for="weight">Constitution:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="constitution" @bind="_characterConstitution"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick='() => Roll3d6("Constitution")'>Roll</button>
                    </div>
                    <div>
                        <label for="weight">Intelligence:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="intelligence" @bind="_characterIntelligence"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick='() => Roll3d6("Intelligence")'>Roll</button>
                    </div>
                    <div>
                        <label for="weight">Wisdom:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="wisdom" @bind="_characterWisdom"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick='() => Roll3d6("Wisdom")'>Roll</button>
                    </div>
                    <div>
                        <label for="weight">Charisma:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="charisma" @bind="_characterCharisma"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick='() => Roll3d6("Charisma")'>Roll</button>
                    </div>
                    <div>
                        <label for="weight">Luck:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="luck" @bind="_characterLuck"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick="CalculateLuck">Calculate</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div>
    &nbsp;
</div>

<button style="padding: 4px" @onclick="CreateNewCharacter">Create</button>&nbsp;<button style="padding: 4px" @onclick="GenerateRandomCharacter">Random Jo</button>
&nbsp;
<div>
    Is a Dry Run?
    <input type="checkbox" @bind="_dryRun"/>
</div>
@code {
    private bool _dryRun = true;
    private List<RaceData> _races = new List<RaceData>();
    // private List<AlignmentData> _alignments = new List<AlignmentData>();
    private List<OrderData> _orders = new List<OrderData>();
    private List<MoralityData> _moralities = new List<MoralityData>();
    private List<ClassData> _classes = new List<ClassData>();
    private List<GenderData> _genders = new List<GenderData>();
    private List<DeityData> _deities = new List<DeityData>();
    private List<DeityData> FilteredDeities
    {
        get
        {
            if (_selectedMoralityId == 0 || _selectedOrderId == 0)
            {
                return _deities;
            }

            var selectedAlignment = AlignmentHelper.GetAlignmentFromOrderAndMorality(_orders, _moralities, 
                _orders.Single(m => m.Id == _selectedOrderId).Midpoint, 
                _moralities.Single(m => m.Id == _selectedMoralityId).Midpoint);
            
            return _deities.Where(d => d.Alignment == selectedAlignment || d.Alignment == "Any").ToList();
        }
    }

    private string _characterName = "";
    private string _characterAge = "";
    private string _characterHeight = "";
    private int _randomHeight;
    private int _characterWeight;
    private int _selectedRaceId;
    private int _characterEyes;
    private int _characterHair;
    private int _characterSkin;
    private int _selectedClassId;
    private int _selectedOrderId;
    private int _selectedMoralityId;
    private int _selectedDeityId;
    private int _selectedGenderId;
    
    private int _characterStrength;
    private int _characterDexterity;
    private int _characterConstitution;
    private int _characterIntelligence;
    private int _characterWisdom;
    private int _characterCharisma;
    private int _characterLuck;

    protected override async Task OnInitializedAsync()
    {
        await using var db = DbContext;
        _races = await db.Races.Include(r => r.HairColours)/*.ThenInclude( h => h.RaceHairColours)*/
            .Include(r => r.EyeColours)/*.ThenInclude(e => e.RaceEyeColours)*/
            .Include(r => r.SkinColours)/*.ThenInclude(s => s.RaceSkinColours)*/
            .Include(r => r.Genders)
            .ToListAsync();
        _orders = await db.Orders.ToListAsync();
        _moralities = await db.Moralities.ToListAsync();
        _classes = await db.Classes.ToListAsync();
        _genders = await db.Genders.ToListAsync();
        _deities = await db.Deities.ToListAsync();
        
    }
    
    private ColourData GetColourById(int colourId, List<ColourData> colours)
    {
        var defaultColour = new ColourData
        {
            Colour = "None",
            ColourHexCode = "#00000000"
        };
        return colours.FirstOrDefault(c => c.Id == colourId)  ?? defaultColour;
    }
    
    private List<ColourData> GetRaceHairColours()
    {
        if (_selectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == _selectedRaceId).HairColours.ToList();
    }

    private List<ColourData> GetRaceEyeColours()
    {
        if (_selectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == _selectedRaceId).EyeColours.ToList();
    }

    private List<ColourData> GetRaceSkinColours()
    {
        if (_selectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == _selectedRaceId).SkinColours.ToList();
    }
    
    private List<GenderData> GetRaceGenders()
    {
        if (_selectedRaceId == 0)
            return new List<GenderData>();
        return _races.Single(r => r.Id == _selectedRaceId).Genders.ToList();
    }

    private void RandomizeAge()
    {
        int startingAge = _races.Single(r => r.Id == _selectedRaceId).AdulthoodAge;
        string ageCategory = _classes.Single(c => c.Id == _selectedClassId).AgeCategory;
        string ageTypeDice = "";
        if (ageCategory == "Simple") ageTypeDice = _races.Single(r => r.Id == _selectedRaceId).SimpleDice;
        else if (ageCategory == "Moderate") ageTypeDice = _races.Single(r => r.Id == _selectedRaceId).ModerateDice;
        else if (ageCategory == "Complex") ageTypeDice = _races.Single(r => r.Id == _selectedRaceId).ComplexDice;

        int result = startingAge + DiceRoller.RollDice(ageTypeDice);

        _characterAge = result.ToString();
    }

    private void RandomizeHeight()
    {
        int baseHeight = 0;
        string randomHeightDice = _races.Single(r => r.Id == _selectedRaceId).HeightDice;
        _randomHeight = DiceRoller.RollDice(randomHeightDice);
        string gender = _genders.Single(g => g.Id == _selectedGenderId).Gender;
        if (gender == "Male") baseHeight = _races.Single(r => r.Id == _selectedRaceId).MaleHeight;
        else if (gender == "Female") baseHeight = _races.Single(r => r.Id == _selectedRaceId).FemaleHeight;
        else baseHeight = (_races.Single(r => r.Id == _selectedGenderId).MaleHeight + _races.Single(r => r.Id == _selectedRaceId).FemaleHeight) / 2;
         //else baseHeight = _races.Single(r => r.Id == _selectedClassId).otherHeight; // Placeholder for other Heights
        
         _characterHeight = ConversionHelper.ConvertInchesToFeetAndInches(baseHeight + _randomHeight);
    }

    private void RandomizeWeight()
    {
        int baseWeight = 0;
        string randomWeightDice = _races.Single(r => r.Id == _selectedRaceId).WeightDice;
        int randomWeight = DiceRoller.RollDice(randomWeightDice);
        string gender = _genders.Single(g => g.Id == _selectedGenderId).Gender;
        if (gender == "Male") baseWeight = _races.Single(r => r.Id == _selectedRaceId).MaleWeight;
        else if (gender == "Female") baseWeight = _races.Single(r => r.Id == _selectedRaceId).FemaleWeight;
        else baseWeight = (_races.Single(r => r.Id == _selectedGenderId).MaleWeight + _races.Single(r => r.Id == _selectedRaceId).FemaleWeight) / 2;
        //else baseHeight = _races.Single(r => r.Id == _selectedClassId).otherHeight; // Placeholder for other Weights

        _characterWeight = baseWeight + (_randomHeight * randomWeight);
    }

    private void Roll3d6(string stat)
    {
        if (stat == "Strength")
            do
            {
                if (_characterStrength <= 7)
                _characterStrength = DiceRoller.RollDice("3d6");
            } while (_characterStrength <= 7);
        
        if (stat == "Dexterity")
            do
            {
                if (_characterDexterity <= 7)
                _characterDexterity = DiceRoller.RollDice("3d6");
            } while (_characterDexterity <= 7);
        
        if (stat == "Constitution")
            do
            {
                if (_characterConstitution <= 7)
                _characterConstitution = DiceRoller.RollDice("3d6");
            } while (_characterConstitution <= 7);
        
        if (stat == "Intelligence")
            do
            {
                if (_characterIntelligence <=7)
                _characterIntelligence = DiceRoller.RollDice("3d6");
            } while (_characterIntelligence <= 7);
        
        if (stat == "Wisdom")
            do
            {
                if (_characterWisdom <=7)
                _characterWisdom = DiceRoller.RollDice("3d6");
            } while (_characterWisdom <= 7);
        
        if (stat == "Charisma")
            do
            {
                if (_characterCharisma <= 7)
                _characterCharisma = DiceRoller.RollDice("3d6");
            } while (_characterCharisma <= 7);
    }

    private void CalculateLuck()
    {
        if (_characterStrength != 0 && _characterDexterity != 0 && _characterConstitution != 0 && _characterIntelligence != 0 && _characterWisdom != 0 && _characterCharisma !=0)
        _characterLuck = (_characterStrength + _characterDexterity + _characterConstitution + _characterIntelligence + _characterWisdom + _characterCharisma) / 6;
    }

    private void GenerateRandomCharacter()
    {
        var rand = new Random();
        _characterName = "Random Jo";
        _selectedRaceId = rand.Next(2, _races.Count +1);
        
        var raceEyes = GetRaceEyeColours();
        var randomRaceEyesIndex = rand.Next(2, raceEyes.Count);
        _characterEyes = raceEyes[randomRaceEyesIndex].Id;
        
        var raceHair = GetRaceHairColours();
        var randomRaceHairIndex = rand.Next(2, raceHair.Count);
        _characterHair = raceHair[randomRaceHairIndex].Id;
        
        var raceSkin = GetRaceSkinColours();
        var randomRaceSkinIndex = rand.Next(2, raceSkin.Count);
        _characterSkin = raceSkin[randomRaceSkinIndex].Id;

        _selectedClassId = rand.Next(2, _classes.Count +1);
        
        RandomizeAge();
        
        _selectedOrderId = rand.Next(1, _orders.Count);
        _selectedMoralityId = rand.Next(1, _moralities.Count);

        var deity = FilteredDeities;
        var randomDeityIndex = rand.Next(2, FilteredDeities.Count);
        _selectedDeityId = deity[randomDeityIndex].Id;
        
        var raceGenders = GetRaceGenders();
        var randomGenderIndex = rand.Next(2, raceGenders.Count);
        _selectedGenderId = raceGenders[randomGenderIndex].Id;
        
        RandomizeHeight();
        RandomizeWeight();

        _characterStrength = 0;
        Roll3d6("Strength");
        _characterDexterity = 0;
        Roll3d6("Dexterity");
        _characterConstitution = 0;
        Roll3d6("Constitution");
        _characterWisdom = 0;
        Roll3d6("Wisdom");
        _characterIntelligence = 0;
        Roll3d6("Intelligence");
        _characterCharisma = 0;
        Roll3d6("Charisma");
        CalculateLuck();
    }

    private void CreateNewCharacter()
    {
        var newCharacter = new CharacterData();
        newCharacter.Name = _characterName;
        newCharacter.Class = _classes.Single(c => c.Id == _selectedClassId).Id;
        newCharacter.Race = _races.Single(r => r.Id == _selectedRaceId).Id;
        newCharacter.Experience = 0;
        newCharacter.HitPoints = 10; // To be Implemented (Add Calculations)
        newCharacter.Deity = _deities.Single(d => d.Id == _selectedDeityId).Id;
        newCharacter.Order = _orders.Single(o => o.Id == _selectedOrderId).Midpoint;
        newCharacter.Morality = _moralities.Single(m => m.Id == _selectedMoralityId).Midpoint;
        newCharacter.Alignment = AlignmentHelper.GetAlignmentFromOrderAndMorality(_orders, _moralities, newCharacter.Order, newCharacter.Morality);
        newCharacter.Gender = _selectedGenderId;
        newCharacter.Hair = _characterHair;
        newCharacter.Eyes = _characterEyes;
        newCharacter.Skin = _characterSkin;
        newCharacter.Age = Int32.Parse(_characterAge);
        newCharacter.Height = ConversionHelper.ConvertFeetAndInchesToInches(_characterHeight);
        newCharacter.Weight = _characterWeight;
        newCharacter.PlayerName = "Shaun"; // To Be Implemented (get from active account creating the character)
        
        using var db = DbContext;

        db.Characters.Add(newCharacter);
        
        if (!_dryRun)
            db.SaveChanges();
        
        foreach (var property in newCharacter.GetType().GetProperties())
        {
            Console.WriteLine($"{property.Name}: {property.GetValue(newCharacter)}");
        }
    
    }

}