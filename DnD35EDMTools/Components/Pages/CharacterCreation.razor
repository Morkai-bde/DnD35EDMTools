@page "/CharacterCreation"

@using DnD35EDMTools.Data
@using Microsoft.EntityFrameworkCore
@using DnD35EDMTools.Helpers
@using System.Reflection
@inherits DnD35EDMTools.Components.Pages.Common.BaseComponent

<h3>Character Creation</h3>

<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Character Creation</title>
    <link rel="stylesheet" href="./styles.css"/>
</head>

<div class="dnd-character-creation-container">
    <div class="dnd-character-main-content">
        <div class="dnd-character-creation-sheet">
            <div class="dnd-cc-top-section">
                <div class="dnd-cc-top__left">
                    <!--#region -->
                    <div>
                        <label for="campaign">Campaign</label>
                    </div>
                    <div>
                        <select class="cc-select" id="campaign" name="campaign" @bind="SelectedCampaignId">
                            @foreach (var id in _campaigns)
                            {
                                <option value="@id.Id" title="@id.Description">@id.Name</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="name">Character Name:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="name" @bind="_characterName"/>
                    </div>

                    <div>
                        <label for="race">Race:</label>
                    </div>
                    <div style="width: 150px">
                        <select class="cc-select" id="race" @bind="_selectedRaceId">
                            @foreach (var race in _races)
                            {
                                <option value=@race.Id title=@race.Description>@race.Race</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="gender">Gender:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="gender" @bind="_selectedGenderId">
                            @foreach (var gender in GetRaceGenders())
                            {
                                <option value=@gender.Id title=@gender.Description>@gender.Gender</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="order">Order:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="order" @bind="_selectedOrderId">
                            @foreach (var order in _orders)
                            {
                                <option value=@order.Id title=@order.Description>@order.Order</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="morality">Morality:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="morality" @bind="_selectedMoralityId">
                            @foreach (var morality in _moralities)
                            {
                                <option value=@morality.Id title=@morality.Description>@morality.Morality</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="deity">Deity:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="deity" @bind="_selectedDeityId">
                            @foreach (var name in FilteredDeities)
                            {
                                <option value=@name.Id title=@name.Description>@name.Name</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="morality">Class:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="class" @bind="_selectedClassId">
                            @foreach (var name in _classes)
                            {
                                <option value=@name.Id title=@name.Description>@name.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <!--#endregion -->
                <div class="dnd-cc-top__right">
                    <!--#region -->
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        &nbsp;
                    </div>
                    <div>
                        <label for="hair">Hair:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="hair" @bind="_characterHair">
                            @foreach (var colour in GetRaceHairColours())
                            {
                                <option value="@colour.Id">@colour.Colour</option>
                            }
                        </select>
                    </div>
                    <div class="cc-colour-box" style="background-color: @(GetColourById(_characterHair, GetRaceHairColours()).ColourHexCode)">
                        &nbsp;
                    </div>
                    <div>
                        <label for="eyes">Eyes:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="eyes" @bind="_characterEyes">
                            @foreach (var colour in GetRaceEyeColours())
                            {
                                <option value="@colour.Id">@colour.Colour</option>
                            }
                        </select>
                    </div>
                    <div class="cc-colour-box" style="background-color: @(GetColourById(_characterEyes, GetRaceEyeColours()).ColourHexCode)">
                        &nbsp;
                    </div>
                    <div>
                        <label for="skin">Skin:</label>
                    </div>
                    <div>
                        <select class="cc-select" id="skin" @bind="_characterSkin">
                            @foreach (var colour in GetRaceSkinColours())
                            {
                                <option value="@colour.Id">@colour.Colour</option>
                            }
                        </select>
                    </div>
                    <div class="cc-colour-box" style="background-color: @(GetColourById(_characterSkin, GetRaceSkinColours()).ColourHexCode)">
                        &nbsp;
                    </div>
                    <div>
                        <label for="age">Age:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="age" @bind="_characterAge"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick="RandomizeAge">Random</button>
                    </div>
                    <div>
                        <label for="height">Height:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="height" @bind="_characterHeight"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick="RandomizeHeight">Random</button>
                    </div>
                    <div>
                        <label for="weight">Weight:</label>
                    </div>
                    <div>
                        <input class="cc-input" type="text" id="weight" @bind="_characterWeight"/>
                    </div>
                    <div>
                        <button class="cc-randomize-button" @onclick="RandomizeWeight">Random</button>
                    </div>
                    <!--#region-->
                    @if (SelectedCampaignStatRollingMethod is "3D6" or "3D6R1" or "4D6DL")
                    {
                        <div>
                            <label for="strength">Strength:</label>
                        </div>
                        <div>
                            <input class="cc-input" type="text" id="strength" @bind="_characterStrength"/>
                        </div>
                        <div>
                            <button class="cc-randomize-button" @onclick='() => RollStat(SelectedCampaignStatRollingMethod, "Strength")'>Roll</button>
                        </div>
                        <div>
                            <label for="dexterity">Dexterity:</label>
                        </div>
                        <div>
                            <input class="cc-input" type="text" id="dexterity" @bind="_characterDexterity"/>
                        </div>
                        <div>
                            <button class="cc-randomize-button" @onclick='() => RollStat(SelectedCampaignStatRollingMethod, "Dexterity")'>Roll</button>
                        </div>
                        <div>
                            <label for="constitution">Constitution:</label>
                        </div>
                        <div>
                            <input class="cc-input" type="text" id="constitution" @bind="_characterConstitution"/>
                        </div>
                        <div>
                            <button class="cc-randomize-button" @onclick='() => RollStat(SelectedCampaignStatRollingMethod, "Constitution")'>Roll</button>
                        </div>
                        <div>
                            <label for="intelligence">Intelligence:</label>
                        </div>
                        <div>
                            <input class="cc-input" type="text" id="intelligence" @bind="_characterIntelligence"/>
                        </div>
                        <div>
                            <button class="cc-randomize-button" @onclick='() => RollStat(SelectedCampaignStatRollingMethod, "Intelligence")'>Roll</button>
                        </div>
                        <div>
                            <label for="wisdom">Wisdom:</label>
                        </div>
                        <div>
                            <input class="cc-input" type="text" id="wisdom" @bind="_characterWisdom"/>
                        </div>
                        <div>
                            <button class="cc-randomize-button" @onclick='() => RollStat(SelectedCampaignStatRollingMethod, "Wisdom")'>Roll</button>
                        </div>
                        <div>
                            <label for="charisma">Charisma:</label>
                        </div>
                        <div>
                            <input class="cc-input" type="text" id="charisma" @bind="_characterCharisma"/>
                        </div>
                        <div>
                            <button class="cc-randomize-button" @onclick='() => RollStat(SelectedCampaignStatRollingMethod, "Charisma")'>Roll</button>
                        </div>
                    }
                    <!--#endregion-->
                    <!--region-->
                    @if (SelectedCampaignStatRollingMethod is "SAL" or "SAA" or "SAH")
                    {
                        <div>
                            &nbsp;
                        </div>
                        <div>
                            &nbsp;
                        </div>
                        <div>
                            &nbsp;
                        </div>
                        <div>
                            <label for="strength">Strength:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="strength" @bind="_characterStrength"/><input class="cc-point-buy-modifier-input" type="text" id="strength-modifier" value="@CalculateModifier(_characterStrength)"/>
                        </div>
                        <div>
                            @foreach (var number in _standardArray)
                            {
                                <button class="cc-point-buy-button"
                                        @onclick='() => SwapStatValues(number, "Strength")'
                                        disabled="@(_characterStrength == number)">
                                    @number
                                </button>
                            }
                        </div>
                        <div>
                            <label for="dexterity">Dexterity:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="dexterity" @bind="_characterDexterity"/><input class="cc-point-buy-modifier-input" type="text" id="dexterity-modifier" value="@CalculateModifier(_characterDexterity)"/>
                        </div>
                        <div>
                            @foreach (var number in _standardArray)
                            {
                                <button class="cc-point-buy-button"
                                        @onclick='() => SwapStatValues(number, "Dexterity")'
                                        disabled="@(_characterDexterity == number)">
                                    @number
                                </button>
                            }
                        </div>
                        <div>
                            <label for="constitution">Constitution:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="constitution" @bind="_characterConstitution"/><input class="cc-point-buy-modifier-input" type="text" id="constitution-modifier" value="@CalculateModifier(_characterConstitution)"/>
                        </div>
                        <div>
                            @foreach (var number in _standardArray)
                            {
                                <button class="cc-point-buy-button"
                                        @onclick='() => SwapStatValues(number, "Constitution")'
                                        disabled="@(_characterConstitution == number)">
                                    @number
                                </button>
                            }
                        </div>
                        <div>
                            <label for="intelligence">Intelligence:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="intelligence" @bind="_characterIntelligence"/><input class="cc-point-buy-modifier-input" type="text" id="intelligence-modifier" value="@CalculateModifier(_characterIntelligence)"/>
                        </div>
                        <div>
                            @foreach (var number in _standardArray)
                            {
                                <button class="cc-point-buy-button"
                                        @onclick='() => SwapStatValues(number, "Intelligence")'
                                        disabled="@(_characterIntelligence == number)">
                                    @number
                                </button>
                            }
                        </div>
                        <div>
                            <label for="wisdom">Wisdom:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="wisdom" @bind="_characterWisdom"/><input class="cc-point-buy-modifier-input" type="text" id="wisdom-modifier" value="@CalculateModifier(_characterWisdom)"/>
                        </div>
                        <div>
                            @foreach (var number in _standardArray)
                            {
                                <button class="cc-point-buy-button"
                                        @onclick='() => SwapStatValues(number, "Wisdom")'
                                        disabled="@(_characterWisdom == number)">
                                    @number
                                </button>
                            }
                        </div>
                        <div>
                            <label for="charisma">Charisma:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="charisma" @bind="_characterCharisma"/><input class="cc-point-buy-modifier-input" type="text" id="charisma-modifier" value="@CalculateModifier(_characterCharisma)"/>
                        </div>
                        <div>
                            @foreach (var number in _standardArray)
                            {
                                <button class="cc-point-buy-button"
                                        @onclick='() => SwapStatValues(number, "Charisma")'
                                        disabled="@(_characterCharisma == number)">
                                    @number
                                </button>
                            }
                        </div>
                    }
                    <!--endregion-->
                    <!--region-->
                    @if (SelectedCampaignStatRollingMethod is "PBA" or "PBR")
                    {
                        <div>
                            Points:
                        </div>
                        <div>
                            @_characterStatPoints
                        </div>
                        <div>
                            @if (SelectedCampaignStatRollingMethod == "PBR")
                            {
                                <button class="cc-randomize-button" @onclick='() => RollRandomStatPoints()'>Roll</button>
                            }
                            &nbsp;
                        </div>
                        <div>
                            <label for="strength">Strength:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="strength" @bind="_characterStrength"/><input class="cc-point-buy-modifier-input" type="text" id="strength-modifier" value="@CalculateModifier(_characterStrength)"/>
                        </div>
                        <div>
                            <button class="cc-point-buy-button" @onclick='() => IncreaseStatValue("Strength")'>+</button><button class="cc-point-buy-button" @onclick='() => DecreaseStatValue("Strength")'>-</button>
                        </div>
                        <div>
                            <label for="dexterity">Dexterity:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="dexterity" @bind="_characterDexterity"/><input class="cc-point-buy-modifier-input" type="text" id="dexterity-modifier" value="@CalculateModifier(_characterDexterity)"/>
                        </div>
                        <div>
                            <button class="cc-point-buy-button" @onclick='() => IncreaseStatValue("Dexterity")'>+</button><button class="cc-point-buy-button" @onclick='() => DecreaseStatValue("Dexterity")'>-</button>
                        </div>
                        <div>
                            <label for="constitution">Constitution:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="constitution" @bind="_characterConstitution"/><input class="cc-point-buy-modifier-input" type="text" id="constitution-modifier" value="@CalculateModifier(_characterConstitution)"/>
                        </div>
                        <div>
                            <button class="cc-point-buy-button" @onclick='() => IncreaseStatValue("Constitution")'>+</button><button class="cc-point-buy-button" @onclick='() => DecreaseStatValue("Constitution")'>-</button>
                        </div>
                        <div>
                            <label for="intelligence">Intelligence:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="intelligence" @bind="_characterIntelligence"/><input class="cc-point-buy-modifier-input" type="text" id="intelligence-modifier" value="@CalculateModifier(_characterIntelligence)"/>
                        </div>
                        <div>
                            <button class="cc-point-buy-button" @onclick='() => IncreaseStatValue("Intelligence")'>+</button><button class="cc-point-buy-button" @onclick='() => DecreaseStatValue("Intelligence")'>-</button>
                        </div>
                        <div>
                            <label for="wisdom">Wisdom:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="wisdom" @bind="_characterWisdom"/><input class="cc-point-buy-modifier-input" type="text" id="wisdom-modifier" value="@CalculateModifier(_characterWisdom)"/>
                        </div>
                        <div>
                            <button class="cc-point-buy-button" @onclick='() => IncreaseStatValue("Wisdom")'>+</button><button class="cc-point-buy-button" @onclick='() => DecreaseStatValue("Wisdom")'>-</button>
                        </div>
                        <div>
                            <label for="charisma">Charisma:</label>
                        </div>
                        <div>
                            <input class="cc-point-buy-stat-input" type="text" id="charisma" @bind="_characterCharisma"/><input class="cc-point-buy-modifier-input" type="text" id="charisma-modifier" value="@CalculateModifier(_characterCharisma)"/>
                        </div>
                        <div>
                            <button class="cc-point-buy-button" @onclick='() => IncreaseStatValue("Charisma")'>+</button><button class="cc-point-buy-button" @onclick='() => DecreaseStatValue("Charisma")'>-</button>
                        </div>
                    }
                    <!--endregion-->
                    @if (_campaigns.Single(c => c.Id == _selectedCampaignId).AllowLuck)
                    {
                        <div>
                            <label for="weight">Luck:</label>
                        </div>
                        <div>
                            <input class="cc-input" type="text" id="luck" @bind="_characterLuck"/>
                        </div>
                        <div>
                            <button class="cc-randomize-button" @onclick="CalculateLuck">Calculate</button>
                        </div>
                    }
                    <!--#endregion -->
                </div>
            </div>
        </div>
    </div>
</div>
<div>
    &nbsp;
</div>

<button style="padding: 4px" @onclick="CreateNewCharacter">Create</button>&nbsp;<button style="padding: 4px" @onclick="GenerateRandomCharacter">Random Jo</button>
&nbsp;
<div>
    Is a Dry Run?
    <input type="checkbox" @bind="_dryRun"/>
</div>
@code {
    private bool _dryRun = true;
    private List<CampaignData> _campaigns = new List<CampaignData>();
    private List<RaceData> _races = new List<RaceData>();
    private List<OrderData> _orders = new List<OrderData>();
    private List<MoralityData> _moralities = new List<MoralityData>();
    private List<ClassData> _classes = new List<ClassData>();
    private List<GenderData> _genders = new List<GenderData>();
    private List<DeityData> _deities = new List<DeityData>();
    private List<int> _standardArray = new List<int>();
    private List<DeityData> FilteredDeities
    {
        get
        {
            if (_selectedMoralityId == 0 || _selectedOrderId == 0)
            {
                return _deities;
            }

            var selectedAlignment = AlignmentHelper.GetAlignmentFromOrderAndMorality(_orders, _moralities,
                _orders.Single(m => m.Id == _selectedOrderId).Midpoint,
                _moralities.Single(m => m.Id == _selectedMoralityId).Midpoint);

            return _deities.Where(d => d.Alignment == selectedAlignment || d.Alignment == "Any").ToList();
        }
    }

    private int _selectedCampaignId = 1;

    private int SelectedCampaignId
    {
        get
        {
            return _selectedCampaignId;
        }
        set
        {
            _selectedCampaignId = value;
            InitializeCharacterStatsBasedOnCampaign();
        }
    }

    private void InitializeCharacterStatsBasedOnCampaign()
    {
        switch (SelectedCampaignStatRollingMethod)
        {
            case "3D6":
            case "3D6R1":
            case "4D6DL":
                SetStatsToZero();
                break;
            case "SAL":
                SetStatsToZero();
                _standardArray = [13, 12, 11, 10, 9, 8];
                break;
            case "SAA":
                SetStatsToZero();
                _standardArray = [15, 14, 13, 12, 10, 8];
                break;
            case "SAH":
                SetStatsToZero();
                _standardArray = [17, 16, 15, 14, 11, 9];
                break;
            case "PBA":
            case "PBR":
                if (SelectedCampaignStatRollingMethod == "PBR")
                    _characterStatPoints = 0;
                _characterStatPoints = 25;
                _characterStrength = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                _characterDexterity = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                _characterConstitution = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                _characterIntelligence = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                _characterWisdom = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                _characterCharisma = RollStats.RollStatBasedOnMethod(SelectedCampaignStatRollingMethod);
                break;
        }
    }

    private string SelectedCampaignStatRollingMethod
    {
        get
        {
            return _campaigns.Single(c =>c.Id == _selectedCampaignId).StatRollingMethod;
        }
    }
    
    private string _characterName = "";
    private string _characterAge = "";
    private string _characterHeight = "";
    private int _randomHeight;
    private int _characterWeight;
    private int _selectedRaceId;
    private int _characterEyes;
    private int _characterHair;
    private int _characterSkin;
    private int _selectedClassId;
    private int _selectedOrderId;
    private int _selectedMoralityId;
    private int _selectedDeityId;
    private int _selectedGenderId;

    private int _randomPointsRolled;
    private int _characterStatPoints = 25;
    private int _characterStrength;
    private int _characterDexterity;
    private int _characterConstitution;
    private int _characterIntelligence;
    private int _characterWisdom;
    private int _characterCharisma;
    private int _characterLuck;
    
    private Dictionary<string, Action<int>> statFields;
    
    protected override async Task OnInitializedAsync()
    {
        await using var db = DbContext;
        _campaigns = await db.Campaigns
            .Where(c => c.Id != 2)
            .Include(c => c.AllowedSources)
            .ToListAsync();
        _races = await db.Races.Include(r => r.HairColours)
            .Include(r => r.EyeColours)
            .Include(r => r.SkinColours)
            .Include(r => r.Genders)
            .ToListAsync();
        _orders = await db.Orders.ToListAsync();
        _moralities = await db.Moralities.ToListAsync();
        _classes = await db.Classes.ToListAsync();
        _genders = await db.Genders.ToListAsync();
        _deities = await db.Deities.ToListAsync();
        InitializeStatFields();
    }
    
    private void InitializeStatFields()
    {
        statFields = new Dictionary<string, Action<int>>
        {
            { "Strength", val => _characterStrength = val },
            { "Dexterity", val => _characterDexterity = val },
            { "Constitution", val => _characterConstitution = val },
            { "Intelligence", val => _characterIntelligence = val },
            { "Wisdom", val => _characterWisdom = val },
            { "Charisma", val => _characterCharisma = val },
        };
    }
    
    private ColourData GetColourById(int colourId, List<ColourData> colours)
    {
        var defaultColour = new ColourData
        {
            Colour = "None",
            ColourHexCode = "#00000000"
        };
        return colours.FirstOrDefault(c => c.Id == colourId)  ?? defaultColour;
    }
    
    private List<ColourData> GetRaceHairColours()
    {
        if (_selectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == _selectedRaceId).HairColours.ToList();
    }

    private List<ColourData> GetRaceEyeColours()
    {
        if (_selectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == _selectedRaceId).EyeColours.ToList();
    }

    private List<ColourData> GetRaceSkinColours()
    {
        if (_selectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == _selectedRaceId).SkinColours.ToList();
    }
    
    private List<GenderData> GetRaceGenders()
    {
        if (_selectedRaceId == 0)
            return new List<GenderData>();
        return _races.Single(r => r.Id == _selectedRaceId).Genders.ToList();
    }

    private void RandomizeAge()
    {
        int startingAge = _races.Single(r => r.Id == _selectedRaceId).AdulthoodAge;
        string ageCategory = _classes.Single(c => c.Id == _selectedClassId).AgeCategory;
        string ageTypeDice = "";
        if (ageCategory == "Simple") ageTypeDice = _races.Single(r => r.Id == _selectedRaceId).SimpleDice;
        else if (ageCategory == "Moderate") ageTypeDice = _races.Single(r => r.Id == _selectedRaceId).ModerateDice;
        else if (ageCategory == "Complex") ageTypeDice = _races.Single(r => r.Id == _selectedRaceId).ComplexDice;

        int result = startingAge + DiceRoller.RollDice(ageTypeDice);

        _characterAge = result.ToString();
    }

    private void RandomizeHeight()
    {
        int baseHeight = 0;
        string randomHeightDice = _races.Single(r => r.Id == _selectedRaceId).HeightDice;
        _randomHeight = DiceRoller.RollDice(randomHeightDice);
        string gender = _genders.Single(g => g.Id == _selectedGenderId).Gender;
        if (gender == "Male") baseHeight = _races.Single(r => r.Id == _selectedRaceId).MaleHeight;
        else if (gender == "Female") baseHeight = _races.Single(r => r.Id == _selectedRaceId).FemaleHeight;
        else baseHeight = (_races.Single(r => r.Id == _selectedGenderId).MaleHeight + _races.Single(r => r.Id == _selectedRaceId).FemaleHeight) / 2;
        
         _characterHeight = ConversionHelper.ConvertInchesToFeetAndInches(baseHeight + _randomHeight);
    }

    private void RandomizeWeight()
    {
        int baseWeight = 0;
        string randomWeightDice = _races.Single(r => r.Id == _selectedRaceId).WeightDice;
        int randomWeight = DiceRoller.RollDice(randomWeightDice);
        string gender = _genders.Single(g => g.Id == _selectedGenderId).Gender;
        if (gender == "Male") baseWeight = _races.Single(r => r.Id == _selectedRaceId).MaleWeight;
        else if (gender == "Female") baseWeight = _races.Single(r => r.Id == _selectedRaceId).FemaleWeight;
        else baseWeight = (_races.Single(r => r.Id == _selectedGenderId).MaleWeight + _races.Single(r => r.Id == _selectedRaceId).FemaleWeight) / 2;

        _characterWeight = baseWeight + (_randomHeight * randomWeight);
    }

    private void SetStatsToZero()
    {
        _characterStrength = 0;
        _characterDexterity = 0;
        _characterConstitution = 0;
        _characterIntelligence = 0;
        _characterWisdom = 0;
        _characterCharisma = 0;
    }
    private void RollStat(string rollingMethod, string stat)
    {
        int statValue = GetStatValue(stat);
        do
        {
            if (statValue <= 7)
                statValue = RollStats.RollStatBasedOnMethod(rollingMethod);
        } while (statValue <= 7);
        SetStatValue(stat, statValue);
    }

    private int GetStatValue(string stat)
    {
        return stat switch
        {
            "Strength" => _characterStrength,
            "Dexterity" => _characterDexterity,
            "Constitution" => _characterConstitution,
            "Intelligence" => _characterIntelligence,
            "Wisdom" => _characterWisdom,
            "Charisma" => _characterCharisma,
            _ => throw new ArgumentException("Invalid stat name", nameof(stat)),
        };
    }

    private void SetStatValue(string stat, int value)
    {
        if (statFields.TryGetValue(stat, out var setStatValue))
        {
            setStatValue(value);
        }
        else
        {
            throw new ArgumentException("Invalid stat");
        }
    }

    private void IncreaseStatValue(string stat)
    {
        const int maxStatValue = 18;

        if (!statFields.ContainsKey(stat)) return;

        var currentStatValue = GetStatValue(stat);
        if (currentStatValue >= maxStatValue) return;

        var pointsToDeduct = currentStatValue < 13 ? 1 : CalculateModifier(currentStatValue);
        if (_characterStatPoints - pointsToDeduct >= 0)
        {
            _characterStatPoints -= pointsToDeduct;
            statFields[stat](currentStatValue + 1);
        }
    }
    
    private void DecreaseStatValue(string stat)
    {
        const int minStatValue = 8;
        
        if (!statFields.ContainsKey(stat)) return;
        
        var currentStatValue = GetStatValue(stat);
        if (currentStatValue <= minStatValue) return;

        var pointsToAdd = 1;
        if (currentStatValue >= 13)
        {
            pointsToAdd = CalculateModifier(currentStatValue) - (CalculateModifier(currentStatValue - 1) == CalculateModifier(currentStatValue) ? 0 : 1);
        }

        _characterStatPoints += pointsToAdd;
        SetStatValue(stat, currentStatValue - 1);
    }

    private void RollRandomStatPoints()
    {
        if (_randomPointsRolled != 0) return;
        _characterStatPoints = DiceRoller.RollDice("8d12");
        _randomPointsRolled = 1;
    }

    private void SwapStatValues(int selectedNumber, string targetStat)
    {

        if (statFields.ContainsKey(targetStat))
        {
            SetSecondaryStatValue(selectedNumber, GetStatValue(targetStat));
            statFields[targetStat](selectedNumber);
        }
    }

    private void SetSecondaryStatValue(int number, int tempStat)
    {

        foreach (var statField in statFields)
        {
            if (GetStatValue(statField.Key) == number)
            {
                statField.Value(tempStat);
                break;
            }
        }
    }
    
    private int CalculateModifier(int stat)
    {
        return (int)Math.Floor((stat - 10) / 2.0);
    }
    
    private void CalculateLuck()
    {
        if (_characterStrength != 0 && _characterDexterity != 0 && _characterConstitution != 0 && _characterIntelligence != 0 && _characterWisdom != 0 && _characterCharisma !=0)
        _characterLuck = (_characterStrength + _characterDexterity + _characterConstitution + _characterIntelligence + _characterWisdom + _characterCharisma) / 6;
    }

    private void GenerateRandomCharacter()
    {
        bool skipRollStatsAndLuck = false;
        if (_selectedCampaignId == 1)
        {
            Console.WriteLine("No Campaign Selected");
            return;
        }
        
        var rand = new Random();
        _characterName = "Random Jo";
        _selectedRaceId = rand.Next(2, _races.Count +1);
        
        var raceEyes = GetRaceEyeColours();
        var randomRaceEyesIndex = rand.Next(2, raceEyes.Count);
        _characterEyes = raceEyes[randomRaceEyesIndex].Id;
        
        var raceHair = GetRaceHairColours();
        var randomRaceHairIndex = rand.Next(2, raceHair.Count);
        _characterHair = raceHair[randomRaceHairIndex].Id;
        
        var raceSkin = GetRaceSkinColours();
        var randomRaceSkinIndex = rand.Next(2, raceSkin.Count);
        _characterSkin = raceSkin[randomRaceSkinIndex].Id;

        _selectedClassId = rand.Next(2, _classes.Count +1);
        
        RandomizeAge();
        
        _selectedOrderId = rand.Next(1, _orders.Count +1);
        _selectedMoralityId = rand.Next(1, _moralities.Count +1);

        var deity = FilteredDeities;
        var randomDeityIndex = rand.Next(2, FilteredDeities.Count);
        _selectedDeityId = deity[randomDeityIndex].Id;
        
        var raceGenders = GetRaceGenders();
        var randomGenderIndex = rand.Next(2, raceGenders.Count);
        _selectedGenderId = raceGenders[randomGenderIndex].Id;
        
        RandomizeHeight();
        RandomizeWeight();
        
        var notAllowedMethods = new[] { "PBA", "BPR", "SAL", "SAA", "SAH" };
        if (notAllowedMethods.Contains(SelectedCampaignStatRollingMethod))
        {
            skipRollStatsAndLuck = true;
        }

        if (!skipRollStatsAndLuck)
        {
            SetStatsToZero();
            RollStat(SelectedCampaignStatRollingMethod, "Strength");
            RollStat(SelectedCampaignStatRollingMethod, "Dexterity");
            RollStat(SelectedCampaignStatRollingMethod, "Constitution");
            RollStat(SelectedCampaignStatRollingMethod, "Wisdom");
            RollStat(SelectedCampaignStatRollingMethod, "Intelligence");
            RollStat(SelectedCampaignStatRollingMethod, "Charisma");
            CalculateLuck();
        }
    }

    private void CreateNewCharacter()
    {
        if (_selectedCampaignId == 1)
        {
            Console.WriteLine("No Campaign Selected");
            return;
        }
        
        var newCharacter = new CharacterData();
        newCharacter.Name = _characterName;
        newCharacter.CampaignId = _selectedCampaignId;
        newCharacter.Class = _classes.Single(c => c.Id == _selectedClassId).Id;
        newCharacter.Race = _races.Single(r => r.Id == _selectedRaceId).Id;
        newCharacter.Experience = 0;
        newCharacter.Strength = _characterStrength;
        newCharacter.Dexterity = _characterDexterity;
        newCharacter.Constitution = _characterConstitution;
        newCharacter.Wisdom = _characterWisdom;
        newCharacter.Intelligence = _characterIntelligence;
        newCharacter.Charisma = _characterCharisma;
        newCharacter.HitPoints = RollHp.LevelOneHitPoints(_classes.Single(r => r.Id == _selectedClassId).HitDice) + CalculateModifier(_characterConstitution);
        newCharacter.Deity = _deities.Single(d => d.Id == _selectedDeityId).Id;
        newCharacter.Order = _orders.Single(o => o.Id == _selectedOrderId).Midpoint;
        newCharacter.Morality = _moralities.Single(m => m.Id == _selectedMoralityId).Midpoint;
        newCharacter.Gender = _selectedGenderId;
        newCharacter.Hair = _characterHair;
        newCharacter.Eyes = _characterEyes;
        newCharacter.Skin = _characterSkin;
        newCharacter.Age = Int32.Parse(_characterAge);
        newCharacter.Height = ConversionHelper.ConvertFeetAndInchesToInches(_characterHeight);
        newCharacter.Weight = _characterWeight;
        newCharacter.PlayerName = "Shaun"; // To Be Implemented (get from active account creating the character)
        
        using var db = DbContext;

        db.Characters.Add(newCharacter);
        
        if (!_dryRun)
            db.SaveChanges();
        
        foreach (var property in newCharacter.GetType().GetProperties())
        {
            Console.WriteLine($"{property.Name}: {property.GetValue(newCharacter)}");
        }
    
    }

}