@page "/CharacterCreation"

@using DnD35EDMTools.Data
@using Microsoft.EntityFrameworkCore
@using DnD35EDMTools.Helpers
@inherits DnD35EDMTools.Components.Pages.Common.BaseComponent

<h3>Character Creation</h3>

<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Character Creation</title>
    <link rel="stylesheet" href="./styles.css"/>
</head>

<div class="dnd-character-creation-container">
    <div class="dnd-character-main-content">
        <div class="dnd-character-creation-sheet">
            <div class="dnd-cc-top-section">
                <div class="dnd-cc-top__left">
                    <div>
                        <label for="name">Character Name:</label>
                    </div>
                    <div>
                        <input class="cc-input-select" type="text" id="name" @bind="characterName"/>
                    </div>

                    <div>
                        <label for="race">Race:</label>
                    </div>
                    <div style="width: 150px">
                        <select class="cc-input-select" id="race" @bind="_selectedRaceId">
                            @foreach (var race in _races)
                            {
                                <option value=@race.Id title=@race.Description>@race.Race</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="subrace">Sub-Race:</label>
                    </div>
                    <div>
                        <select class="cc-input-select" id="subrace" @bind="_selectedSubRaceId">
                            @foreach (var race in _races)
                            {
                                <option value=@race.Id title=@race.Description>@race.Race</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="gender">Gender:</label>
                    </div>
                    <div>
                        <select class="cc-input-select" id="gender" @bind="_selectedGenderId" >
                            @foreach (var gender in GetRaceGenders())
                            {
                                <option value=@gender.Id title=@gender.Description>@gender.Gender</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="order">Order:</label>
                    </div>
                    <div>
                        <select class="cc-input-select" id="order" @bind="_selectedOrderId">
                            @foreach (var order in _orders)
                            {
                                <option value=@order.Id title=@order.Description>@order.Order</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="morality">Morality:</label>
                    </div>
                    <div>
                        <select class="cc-input-select" id="morality" @bind="_selectedMoralityId">
                            @foreach (var morality in _moralities)
                            {
                                <option value=@morality.Id title=@morality.Description>@morality.Morality</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="dnd-cc-top__right">
                    <div>
                        <label for="hair">Hair:</label>
                    </div>
                    <div>
                        <select class="cc-input-select" id="hair" @bind="characterHair">
                            @foreach (var colour in GetRaceHairColours())
                            {
                                <option value="@colour.Id">@colour.Colour</option>
                            }
                        </select>
                    </div>
                        <div class="cc-colourbox" style="background-color: @(GetColourById(characterHair, GetRaceHairColours())?.ColourHexCode ?? "")">
                            &nbsp;
                        </div>
                    <div>
                        <label for="eyes">Eyes:</label>
                    </div>
                    <div>
                        <select class="cc-input-select" id="eyes" @bind="characterEyes">
                            @foreach (var colour in GetRaceEyeColours())
                            {
                                <option value="@colour.Id">@colour.Colour</option>
                            }
                        </select>
                    </div>
                        <div class="cc-colourbox" style="background-color: @(GetColourById(characterEyes, GetRaceEyeColours())?.ColourHexCode ?? "")">
                            &nbsp;
                        </div>
                    <div>
                        <label for="skin">Skin:</label>
                    </div>
                    <div>
                        <select class="cc-input-select" id="skin" @bind="characterSkin">
                            @foreach (var colour in GetRaceSkinColours())
                            {
                                <option value="@colour.Id">@colour.Colour</option>
                            }
                        </select>
                    </div>
                        <div class="cc-colourbox" style="background-color: @(GetColourById(characterSkin, GetRaceSkinColours())?.ColourHexCode ?? "")">
                            &nbsp;
                        </div>
                    <div>
                        <label for="age">Age:</label>
                    </div>
                    <div>
                        <input class="cc-input-select" type="text" id="age" @bind="characterAge"/>
                    </div>
                        <div>
                            <button class="cc-randomize-button">Random</button>
                        </div>
                    <div>
                        <label for="height">Height:</label>
                    </div>
                    <div>
                        <input class="cc-input-select" type="text" id="height" @bind="characterHeight"/>
                    </div>
                        <div>
                            <button class="cc-randomize-button">Random</button>
                        </div>
                    <div>
                        <label for="weight">Weight:</label>
                    </div>
                    <div>
                        <input class="cc-input-select" type="text" id="weight" @bind="characterWeight"/>
                    </div>
                        <div>
                            <button class="cc-randomize-button">Random</button>
                        </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div>
    &nbsp;
</div>

<button @onclick="CreateNewCharacter">Create</button>
&nbsp;
<div>
    Is a Dry Run?
    <input type="checkbox" @bind="dryRun"/>
</div>
@code {
    private bool dryRun = true;
    private List<RaceData> _races = new List<RaceData>();
    // private List<AlignmentData> _alignments = new List<AlignmentData>();
    private List<OrderData> _orders = new List<OrderData>();
    private List<MoralityData> _moralities = new List<MoralityData>();
    
    private string characterName, characterRace, characterSubRace,  characterAge, characterHeight, characterWeight;
    
    private int characterHair, characterEyes, characterSkin;
    
    private int _selectedRaceId = 0;
    private int _selectedSubRaceId = 0;
    private int _selectedGenderId = 0;
    private int _selectedMoralityId = 0;
    private int _selectedOrderId = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await using var db = DbContext;
        _races = await db.Races.Include(r => r.HairColours)/*.ThenInclude( h => h.RaceHairColours)*/
            .Include(r => r.EyeColours)/*.ThenInclude(e => e.RaceEyeColours)*/
            .Include(r => r.SkinColours)/*.ThenInclude(s => s.RaceSkinColours)*/
            .Include(r => r.Genders)
            .ToListAsync();
        _orders = await db.Orders.ToListAsync();
        _moralities = await db.Moralities.ToListAsync();
        
    }
    
    private ColourData GetColourById(int colourId, List<ColourData> colours)
    {
        return colours.FirstOrDefault(c => c.Id == colourId);
    }
    
    private List<ColourData> GetRaceHairColours()
    {
        if (_selectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == _selectedRaceId).HairColours.ToList();
    }

    private List<ColourData> GetRaceEyeColours()
    {
        if (_selectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == _selectedRaceId).EyeColours.ToList();
    }

    private List<ColourData> GetRaceSkinColours()
    {
        if (_selectedRaceId == 0)
            return new List<ColourData>();
        return _races.Single(r => r.Id == _selectedRaceId).SkinColours.ToList();
    }
    
    private List<GenderData> GetRaceGenders()
    {
        if (_selectedRaceId == 0)
            return new List<GenderData>();
        return _races.Single(r => r.Id == _selectedRaceId).Genders.ToList();
    }
    
    private void CreateNewCharacter()
    {
        var newCharacter = new CharacterData();
        newCharacter.Name = characterName;
        newCharacter.Class = "Barbarian"; // To be Implemented (Add Entity and Data)
        newCharacter.Race = _races.Single(r => r.Id == _selectedRaceId).Race.ToString(); // Temporary fix to get the race name, it should be changed to an int with a foreign key
        newCharacter.SubRace = "Calashite"; // characterSubRace;
        newCharacter.Experience = 0;
        newCharacter.HitPoints = 10; // To be Implemented (Add Calculations)
        newCharacter.Alignment = "Chaotic Evil"; // To be Implemented (split in two and derive from both)
        newCharacter.Order = _orders.Single(o => o.Id == _selectedOrderId).Midpoint;
        newCharacter.Morality = _moralities.Single(m => m.Id == _selectedMoralityId).Midpoint;
        // newCharacter.Deity = 0; // To be Implemented (Add Entity and Data)
        newCharacter.Gender = _selectedGenderId;
        newCharacter.Hair = characterHair;
        newCharacter.Eyes = characterEyes;
        newCharacter.Skin = characterSkin;
        newCharacter.Age = Int32.Parse(characterAge);
        newCharacter.Height = ConversionHelper.ConvertFeetAndInchesToInches(characterHeight);
        newCharacter.Weight = Int32.Parse(characterWeight);
        newCharacter.PlayerName = "Shaun"; // To Be Implemented (get from active account creating the character)
        
        using var db = DbContext;

        db.Characters.Add(newCharacter);
        
        if (!dryRun)
            db.SaveChanges();
        
        foreach (var property in newCharacter.GetType().GetProperties())
        {
            Console.WriteLine($"{property.Name}: {property.GetValue(newCharacter)}");
        }
    
    }

}